#pragma once

#include "../defines.h"

namespace star 
{
<<<<<<< HEAD
	class BaseScene
	{
	public:
		BaseScene(const tstring & name);
		virtual ~BaseScene() {}

		virtual status OnActivate() { return STATUS_OK; }
		virtual void OnDeactivate() {}
		virtual status OnStep() { return STATUS_OK; }

		virtual void OnStart() {}
		virtual void OnResume() {}
		virtual void OnPause() {}
		virtual void OnStop() {}
		virtual void OnDestroy() {}

		virtual void OnSaveState(void** pData,size_t* pSize) {}
		virtual void OnConfigurationChanged() {}
		virtual void OnLowMemory() {}

		virtual void OnCreateWindow() {}
		virtual void OnDestroyWindow() {}
		virtual void OnGainFocus() {}
		virtual void OnLostFocus() {}

		const tstring & GetName() { return m_Name; }
		bool IsInitialized() { return m_Initialized; }

	private:
		tstring m_Name;
		bool m_Initialized;

		// -------------------------
		// Disabling default copy constructor and default 
		// assignment operator.
		// -------------------------
		BaseScene(const BaseScene& t);
		BaseScene& operator=(const BaseScene& t);
	};
}
=======
public:

	BaseScene(tstring Name);
	virtual ~BaseScene(){}

	virtual status onActivate(){return STATUS_OK;}
	virtual void onDeactivate(){};
	virtual status Update(){return STATUS_OK;}
	virtual status Draw(){return STATUS_OK;}

	virtual void onStart() {};
	virtual void onResume() {};
	virtual void onPause() {};
	virtual void onStop() {};
	virtual void onDestroy() {};

	virtual void onSaveState(void** pData,size_t* pSize) {};
	virtual void onConfigurationChanged() {};
	virtual void onLowMemory() {};

	virtual void onCreateWindow() {};
	virtual void onDestroyWindow() {};
	virtual void onGainFocus() {};
	virtual void onLostFocus() {};

	tstring getName(){return mName;}
	bool IsInitialized(){return bInitialized;}

private:
	tstring mName;
	bool bInitialized;
};


#endif
>>>>>>> Took out scenemanager from the eventloop and window.
